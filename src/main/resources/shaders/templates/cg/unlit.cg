#define NO_FLAGS (0)

// LBP2 compile flags
#define DECALS (1 << 0)
#define WATER_CAUSTICS (1 << 1)
#define SPRITELIGHT (1 << 2)
#define BAKED_AO (1 << 3)
#define DYNAMIC_AO (1 << 4)
#define AO_FLAGS (BAKED_AO | DYNAMIC_AO)
#define BAKED_SHADOWS (1 << 5)
#define DYNAMIC_SHADOWS (1 << 6)
#define SHADOW_FLAGS (BAKED_SHADOWS | DYNAMIC_SHADOWS)

// LBP1 compile flags
#define DEFERRED (1 << 7)
#define DEFERRED_NORMAL_PASS (1 << 8)

// Make shader PSSL compatible.
#define ORBIS (1 << 15)

// Set this variable to define how this shader is compiled.
// Refer to charts below for appropriate configurations.
#define FLAGS ENV.COMPILE_FLAGS

#if (FLAGS & ORBIS)
    #define SAMPLE_2D(sampler, uv) sampler##_tex.Sample(sampler##_smp, uv)
    #define SAMPLE_3D(sampler, uv) sampler##_tex.Sample(sampler##_smp, uv)
    #define SAMPLE_3D_LOD(sampler, locd) sampler##_tex.SampleLOD(sampler##_smp, locd.xyz, locd.w)
    #define SAMPLE_2D_PROJ(sampler, value) sampler##_tex.Sample(sampler##_smp, float2(value.x, value.y) / value.w)

    #define CREATE_SAMPLER_2D(name, index) SamplerState name##_smp: register(s##index); Texture2D name##_tex : register(t##index)
    #define CREATE_SAMPLER_3D(name, index) SamplerState name##_smp: register(s##index); Texture3D name##_tex : register(t##index)
#else
    #define SAMPLE_2D(sampler, uv) tex2D(sampler, uv)
    #define SAMPLE_3D(sampler, uv) tex3D(sampler, uv)
    #define SAMPLE_3D_LOD(sampler, locd) tex3Dlod(sampler, locd)
    #define SAMPLE_2D_PROJ(sampler, value) tex2Dproj(sampler, value)
    #define SAMPLE_2D_BIAS(sampler, uv, blur) tex2Dbias(sampler, uv, blur)

    #define CREATE_SAMPLER_2D(name, index) sampler2D name: TEXUNIT##index
    #define CREATE_SAMPLER_3D(name, index) sampler3D name: TEXUNIT##index
#endif

CREATE_SAMPLER_2D(s0, 0);
CREATE_SAMPLER_2D(s1, 1);
CREATE_SAMPLER_2D(s2, 2);
CREATE_SAMPLER_2D(s3, 3);
CREATE_SAMPLER_2D(s4, 4);
CREATE_SAMPLER_2D(s5, 5);
CREATE_SAMPLER_2D(s6, 6);
CREATE_SAMPLER_2D(s7, 7);


#if (FLAGS & DECALS)
    #if ((FLAGS & DEFERRED) != 0)
        CREATE_SAMPLER_2D(itex, 10);
        CREATE_SAMPLER_2D(wstex, 11);
    #else
        CREATE_SAMPLER_2D(itex, 8);
        CREATE_SAMPLER_2D(wstex, 14);
    #endif
#endif

CREATE_SAMPLER_2D(cbuf, 15);

float4 GetDiffuseColor(float4 iUV, float4 iColor) {
ENV.AUTO_DIFFUSE_SETUP
}

#if (FLAGS & DECALS)
float4 GetDecals(float3 iDecalUV) {
    float2 dcoord = (frac(iDecalUV.xy * 256.0) * 127.0 + floor(SAMPLE_2D(itex, iDecalUV.xy).xy * 32640.0 + 0.5) + 0.5) * 0.000488281;
    return SAMPLE_2D(wstex, dcoord);
}
#endif

#if (FLAGS & DEFERRED)

#if (FLAGS & WATER_CAUSTICS)
    #define DEFERRED_POS_OFFSET float2(0.003125, 0.00555556)
    #define DEFERRED_ZBUF_OFFSET float2(0.00078125, 0.0)
    #define DEFERRED_LNBUF_OFFSET (zbfs * 0.199219)
#else
    #define DEFERRED_POS_OFFSET float2(0.00078125, 0.00138889)
    #define DEFERRED_ZBUF_OFFSET float2(0.000195313, 0.0)
    #define DEFERRED_LNBUF_OFFSET (zbfs * 0.0498047)
#endif

float2 encode(float3 normal) {
    float2 encoded = normal.xy;
    float z = length(normal + float3(0.0, 0.0, 1.0));
    return (encoded / z / 2.0) + 0.5;
}

float3 decode(float2 encoded_normal) {
    float2 n = (encoded_normal * 2.0) - 1.0;
    float z = 1.0 - dot(n, n);
    float3 normal = float3(n, abs(z) / sqrt(z)) / rsqrt(z) * 2.0;
    normal.z -= 1.0;
    return normal;
}

// LBP1 main
void main(
    float4 iUV: TEXCOORD0,
    float4 iTangent: TEXCOORD1,
    float4 iNormal: TEXCOORD2,
    float3 iDecalUV: TEXCOORD3,
    float3 iVec2Eye: TEXCOORD4,
    float4 iPositionNew: TEXCOORD5,
    float4 iPositionOld: TEXCOORD6,

    float4 iWorldPos: WPOS,
    float4 iColor: COLOR0,

    out half4 fragColor
) {
    // First normal pass shader
    #if ((FLAGS & DEFERRED_NORMAL_PASS) == (DEFERRED_NORMAL_PASS))
        float3 normal = normalize(iNormal.xyz);
        float2 delta = ((iPositionNew.xy / iPositionNew.w) - (iPositionOld.xy / iPositionOld.w)) * 4.0;
        fragColor = half4(
            encode(normal),
            half2(delta.x, -delta.y) + 0.503922
        );
    // The actual color shaders
    #else 
        float3 color = GetDiffuseColor(iUV, iColor).xyz;
        #if (FLAGS & DECALS)
            float4 decals = GetDecals(iDecalUV);
            color = (color * decals.w) + decals.xyz;
        #endif

        float factor = max(max(color.x, max(color.y, color.z)), 1.0);
        fragColor = half4(
            color / factor,
            (1.0 / factor) / 2
        );
    #endif
}
#else

// LBP2 Main
void main(
    #if (FLAGS & ORBIS)
    float4 iWorldPos: SPOSITION,
    #else
    float4 iWorldPos: WPOS,
    #endif
    float4 iUV: TEXCOORD0,
    float4 iTangent: TEXCOORD1,
    float4 iNormal: TEXCOORD2,
    float3 iDecalUV: TEXCOORD3,
    float4 iVec2Eye: TEXCOORD4,
    float4 iPositionNew: TEXCOORD5,
    float4 iShadowMapPosition: TEXCOORD6,
    float2 iLightmapUV: TEXCOORD7,

    float4 iColor: COLOR0,
    float4 iPlaneCoeff: CLP0,

    out half4 fragColor
) {
    float3 diffuse = GetDiffuseColor(iUV, iColor).xyz;
    #if (FLAGS & DECALS)
        float4 decals = GetDecals(iDecalUV);
        diffuse = (diffuse * decals.w) + decals.xyz;
    #endif

    fragColor = half4(
        diffuse,
        1.0
    );
} 
#endif